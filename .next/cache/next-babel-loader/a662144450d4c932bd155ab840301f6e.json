{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n      query($filter: FilterInput, $skip: Int, $limit: Int) {\\n        getFilteredCars(filter: $filter, skip: $skip, limit: $limit) {\\n          cars {\\n            _id\\n            brand\\n            model\\n            photo\\n            price\\n            year\\n            mileage\\n          }\\n          count\\n        }\\n      }\\n    \"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n      mutation($id: ID!) {\\n        deleteCar(id: $id) {\\n          _id\\n        }\\n      }\\n    \"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n      mutation($id: ID!, $car: CarInput!) {\\n        updateCar(id: $id, car: $car) {\\n          _id\\n        }\\n      }\\n    \"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n      mutation($car: CarInput!) {\\n        addCar(car: $car) {\\n          _id\\n        }\\n      }\\n    \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n      query($id: ID!) {\\n        getCarById(id: $id) {\\n          _id\\n          brand\\n          model\\n          category\\n          date\\n          price\\n          year\\n          mileage\\n          transmission\\n          externalColor\\n          photo\\n          engine\\n          colorSimpleName\\n          description\\n        }\\n      }\\n    \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n      query {\\n        getAllCars {\\n          cars {\\n            _id\\n          }\\n        }\\n      }\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      query($skip: Int, $limit: Int) {\\n        getAllCars(skip: $skip, limit: $limit) {\\n          cars {\\n            _id\\n            brand\\n            model\\n            photo\\n            price\\n            year\\n            mileage\\n          }\\n          count\\n        }\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from 'apollo-boost';\nimport { client } from '../utils/client';\nexport var getAllCars = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(skip, limit) {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return client.query({\n              query: gql(_templateObject()),\n              variables: {\n                skip: skip,\n                limit: limit\n              }\n            });\n\n          case 2:\n            res = _context.sent;\n            client.resetStore();\n            return _context.abrupt(\"return\", res.data.getAllCars);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getAllCars(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getCarsId = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return client.query({\n              query: gql(_templateObject2()),\n              fetchPolicy: 'no-cache'\n            });\n\n          case 2:\n            res = _context2.sent;\n            client.resetStore();\n            return _context2.abrupt(\"return\", res.data.getAllCars.cars);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getCarsId() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getCarById = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return client.query({\n              query: gql(_templateObject3()),\n              variables: {\n                id: id\n              }\n            });\n\n          case 2:\n            res = _context3.sent;\n            return _context3.abrupt(\"return\", res.data.getCarById);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getCarById(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var addCar = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(car) {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            car.price = +car.price;\n            car.year = +car.year;\n            car.mileage = +car.mileage;\n            _context4.next = 5;\n            return client.mutate({\n              mutation: gql(_templateObject4()),\n              variables: {\n                car: car\n              }\n            });\n\n          case 5:\n            res = _context4.sent;\n            return _context4.abrupt(\"return\", res.data.addCar);\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function addCar(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var updateCar = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref5) {\n    var id, car, res;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            id = _ref5.id, car = _ref5.car;\n            car.price = +car.price;\n            car.year = +car.year;\n            car.mileage = +car.mileage;\n            _context5.next = 6;\n            return client.mutate({\n              mutation: gql(_templateObject5()),\n              variables: {\n                id: id,\n                car: car\n              }\n            });\n\n          case 6:\n            res = _context5.sent;\n            return _context5.abrupt(\"return\", res.data.updateCar);\n\n          case 8:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function updateCar(_x5) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var deleteCar = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(id) {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return client.mutate({\n              mutation: gql(_templateObject6()),\n              variables: {\n                id: id\n              }\n            });\n\n          case 2:\n            res = _context6.sent;\n            return _context6.abrupt(\"return\", res.data.deleteCar);\n\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function deleteCar(_x6) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var getFilteredCars = /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(filter, skip, limit) {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return client.query({\n              query: gql(_templateObject7()),\n              variables: {\n                filter: filter,\n                skip: skip,\n                limit: limit\n              }\n            });\n\n          case 2:\n            res = _context7.sent;\n            return _context7.abrupt(\"return\", {\n              cars: res.data.getFilteredCars.cars,\n              count: res.data.getFilteredCars.count\n            });\n\n          case 4:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n\n  return function getFilteredCars(_x7, _x8, _x9) {\n    return _ref8.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/Admin/Desktop/VS Code project/NEXTJS/first-nextjs/operations/car-operations.js"],"names":["gql","client","getAllCars","skip","limit","query","variables","res","resetStore","data","getCarsId","fetchPolicy","cars","getCarById","id","addCar","car","price","year","mileage","mutate","mutation","updateCar","deleteCar","getFilteredCars","filter","count"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { client } from '../utils/client';\r\n\r\nexport const getAllCars = async (skip, limit) => {\r\n  const res = await client.query({\r\n    query: gql`\r\n      query($skip: Int, $limit: Int) {\r\n        getAllCars(skip: $skip, limit: $limit) {\r\n          cars {\r\n            _id\r\n            brand\r\n            model\r\n            photo\r\n            price\r\n            year\r\n            mileage\r\n          }\r\n          count\r\n        }\r\n      }\r\n    `,\r\n    variables: { skip, limit },\r\n  });\r\n  client.resetStore();\r\n  return res.data.getAllCars;\r\n};\r\nexport const getCarsId = async () => {\r\n  const res = await client.query({\r\n    query: gql`\r\n      query {\r\n        getAllCars {\r\n          cars {\r\n            _id\r\n          }\r\n        }\r\n      }\r\n    `,\r\n    fetchPolicy: 'no-cache',\r\n  });\r\n  client.resetStore();\r\n  return res.data.getAllCars.cars;\r\n};\r\nexport const getCarById = async (id) => {\r\n  const res = await client.query({\r\n    query: gql`\r\n      query($id: ID!) {\r\n        getCarById(id: $id) {\r\n          _id\r\n          brand\r\n          model\r\n          category\r\n          date\r\n          price\r\n          year\r\n          mileage\r\n          transmission\r\n          externalColor\r\n          photo\r\n          engine\r\n          colorSimpleName\r\n          description\r\n        }\r\n      }\r\n    `,\r\n    variables: { id },\r\n  });\r\n\r\n  return res.data.getCarById;\r\n};\r\n\r\nexport const addCar = async (car) => {\r\n  car.price = +car.price;\r\n  car.year = +car.year;\r\n  car.mileage = +car.mileage;\r\n  const res = await client.mutate({\r\n    mutation: gql`\r\n      mutation($car: CarInput!) {\r\n        addCar(car: $car) {\r\n          _id\r\n        }\r\n      }\r\n    `,\r\n    variables: { car },\r\n  });\r\n\r\n  return res.data.addCar;\r\n};\r\n\r\nexport const updateCar = async ({ id, car }) => {\r\n  car.price = +car.price;\r\n  car.year = +car.year;\r\n  car.mileage = +car.mileage;\r\n\r\n  const res = await client.mutate({\r\n    mutation: gql`\r\n      mutation($id: ID!, $car: CarInput!) {\r\n        updateCar(id: $id, car: $car) {\r\n          _id\r\n        }\r\n      }\r\n    `,\r\n    variables: {\r\n      id,\r\n      car,\r\n    },\r\n  });\r\n\r\n  return res.data.updateCar;\r\n};\r\nexport const deleteCar = async (id) => {\r\n  const res = await client.mutate({\r\n    mutation: gql`\r\n      mutation($id: ID!) {\r\n        deleteCar(id: $id) {\r\n          _id\r\n        }\r\n      }\r\n    `,\r\n    variables: { id },\r\n  });\r\n\r\n  return res.data.deleteCar;\r\n};\r\n\r\nexport const getFilteredCars = async (filter, skip, limit) => {\r\n  const res = await client.query({\r\n    query: gql`\r\n      query($filter: FilterInput, $skip: Int, $limit: Int) {\r\n        getFilteredCars(filter: $filter, skip: $skip, limit: $limit) {\r\n          cars {\r\n            _id\r\n            brand\r\n            model\r\n            photo\r\n            price\r\n            year\r\n            mileage\r\n          }\r\n          count\r\n        }\r\n      }\r\n    `,\r\n    variables: { filter, skip, limit },\r\n  });\r\n\r\n  return {\r\n    cars: res.data.getFilteredCars.cars,\r\n    count: res.data.getFilteredCars.count,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}