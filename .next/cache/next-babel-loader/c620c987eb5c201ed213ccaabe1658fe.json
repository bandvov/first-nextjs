{"ast":null,"code":"import { gql } from 'apollo-boost';\nimport { client } from '../utils/client';\nexport const getAllCars = async (skip, limit) => {\n  const res = await client.query({\n    query: gql`\n      query($skip: Int, $limit: Int) {\n        getAllCars(skip: $skip, limit: $limit) {\n          cars {\n            _id\n            brand\n            model\n            photo\n            price\n            year\n            mileage\n          }\n          count\n        }\n      }\n    `,\n    variables: {\n      skip,\n      limit\n    }\n  });\n  client.resetStore();\n  return res.data.getAllCars;\n};\nexport const getCarsId = async () => {\n  const res = await client.query({\n    query: gql`\n      query {\n        getAllCars {\n          cars {\n            _id\n          }\n        }\n      }\n    `,\n    fetchPolicy: 'no-cache'\n  });\n  client.resetStore();\n  return res.data.getAllCars.cars;\n};\nexport const getCarById = async id => {\n  const res = await client.query({\n    query: gql`\n      query($id: ID!) {\n        getCarById(id: $id) {\n          _id\n          brand\n          model\n          category\n          date\n          price\n          year\n          mileage\n          transmission\n          externalColor\n          photo\n          engine\n          colorSimpleName\n          description\n        }\n      }\n    `,\n    variables: {\n      id\n    }\n  });\n  return res.data.getCarById;\n};\nexport const addCar = async car => {\n  car.price = +car.price;\n  car.year = +car.year;\n  car.mileage = +car.mileage;\n  const res = await client.mutate({\n    mutation: gql`\n      mutation($car: CarInput!) {\n        addCar(car: $car) {\n          _id\n        }\n      }\n    `,\n    variables: {\n      car\n    }\n  });\n  return res.data.addCar;\n};\nexport const updateCar = async ({\n  id,\n  car\n}) => {\n  car.price = +car.price;\n  car.year = +car.year;\n  car.mileage = +car.mileage;\n  const res = await client.mutate({\n    mutation: gql`\n      mutation($id: ID!, $car: CarInput!) {\n        updateCar(id: $id, car: $car) {\n          _id\n        }\n      }\n    `,\n    variables: {\n      id,\n      car\n    }\n  });\n  return res.data.updateCar;\n};\nexport const deleteCar = async id => {\n  const res = await client.mutate({\n    mutation: gql`\n      mutation($id: ID!) {\n        deleteCar(id: $id) {\n          _id\n        }\n      }\n    `,\n    variables: {\n      id\n    }\n  });\n  return res.data.deleteCar;\n};\nexport const getFilteredCars = async (filter, skip, limit) => {\n  const res = await client.query({\n    query: gql`\n      query($filter: FilterInput, $skip: Int, $limit: Int) {\n        getFilteredCars(filter: $filter, skip: $skip, limit: $limit) {\n          cars {\n            _id\n            brand\n            model\n            photo\n            price\n            year\n            mileage\n          }\n          count\n        }\n      }\n    `,\n    variables: {\n      filter,\n      skip,\n      limit\n    }\n  });\n  return {\n    cars: res.data.getFilteredCars.cars,\n    count: res.data.getFilteredCars.count\n  };\n};","map":{"version":3,"sources":["C:/Users/Admin/Desktop/VS Code project/NEXTJS/first-nextjs/operations/car-operations.js"],"names":["gql","client","getAllCars","skip","limit","res","query","variables","resetStore","data","getCarsId","fetchPolicy","cars","getCarById","id","addCar","car","price","year","mileage","mutate","mutation","updateCar","deleteCar","getFilteredCars","filter","count"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-boost';\nimport { client } from '../utils/client';\n\nexport const getAllCars = async (skip, limit) => {\n  const res = await client.query({\n    query: gql`\n      query($skip: Int, $limit: Int) {\n        getAllCars(skip: $skip, limit: $limit) {\n          cars {\n            _id\n            brand\n            model\n            photo\n            price\n            year\n            mileage\n          }\n          count\n        }\n      }\n    `,\n    variables: { skip, limit },\n  });\n  client.resetStore();\n  return res.data.getAllCars;\n};\nexport const getCarsId = async () => {\n  const res = await client.query({\n    query: gql`\n      query {\n        getAllCars {\n          cars {\n            _id\n          }\n        }\n      }\n    `,\n    fetchPolicy: 'no-cache',\n  });\n  client.resetStore();\n  return res.data.getAllCars.cars;\n};\nexport const getCarById = async (id) => {\n  const res = await client.query({\n    query: gql`\n      query($id: ID!) {\n        getCarById(id: $id) {\n          _id\n          brand\n          model\n          category\n          date\n          price\n          year\n          mileage\n          transmission\n          externalColor\n          photo\n          engine\n          colorSimpleName\n          description\n        }\n      }\n    `,\n    variables: { id },\n  });\n\n  return res.data.getCarById;\n};\n\nexport const addCar = async (car) => {\n  car.price = +car.price;\n  car.year = +car.year;\n  car.mileage = +car.mileage;\n  const res = await client.mutate({\n    mutation: gql`\n      mutation($car: CarInput!) {\n        addCar(car: $car) {\n          _id\n        }\n      }\n    `,\n    variables: { car },\n  });\n\n  return res.data.addCar;\n};\n\nexport const updateCar = async ({ id, car }) => {\n  car.price = +car.price;\n  car.year = +car.year;\n  car.mileage = +car.mileage;\n\n  const res = await client.mutate({\n    mutation: gql`\n      mutation($id: ID!, $car: CarInput!) {\n        updateCar(id: $id, car: $car) {\n          _id\n        }\n      }\n    `,\n    variables: {\n      id,\n      car,\n    },\n  });\n\n  return res.data.updateCar;\n};\nexport const deleteCar = async (id) => {\n  const res = await client.mutate({\n    mutation: gql`\n      mutation($id: ID!) {\n        deleteCar(id: $id) {\n          _id\n        }\n      }\n    `,\n    variables: { id },\n  });\n\n  return res.data.deleteCar;\n};\n\nexport const getFilteredCars = async (filter, skip, limit) => {\n  const res = await client.query({\n    query: gql`\n      query($filter: FilterInput, $skip: Int, $limit: Int) {\n        getFilteredCars(filter: $filter, skip: $skip, limit: $limit) {\n          cars {\n            _id\n            brand\n            model\n            photo\n            price\n            year\n            mileage\n          }\n          count\n        }\n      }\n    `,\n    variables: { filter, skip, limit },\n  });\n\n  return {\n    cars: res.data.getFilteredCars.cars,\n    count: res.data.getFilteredCars.count,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}