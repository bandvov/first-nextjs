{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloServer, gql } from 'apollo-server-micro';\nimport { carsQuery, carsMutation } from '../../modules/cars.resolvers';\nimport { carType, carInputType } from '../../modules/cars.graphql';\nimport connectDb from '../../utils/db';\nconnectDb();\nconst typeDefs = gql`\n  ${carType}\n  ${carInputType}\n\n  type PaginatedCar {\n    cars: [Car]\n    count: Int\n  }\n  type Query {\n    getAllCars(skip: Int, limit: Int): PaginatedCar\n    getCarById(id: ID!): Car\n    getFilteredCars(filter: FilterInput, skip: Int, limit: Int): PaginatedCar\n  }\n  type Mutation {\n    addCar(car: CarInput!): Car\n    updateCar(car: CarInput!, id: ID!): Car\n    deleteCar(id: ID!): Car\n  }\n  input FilterInput {\n    brand: String\n    color: String\n    model: String\n    minYear: String\n    maxYear: String\n    minPrice: String\n    maxPrice: String\n    searchText: String\n    page: String\n  }\n`;\nconst resolvers = {\n  Query: _objectSpread({}, carsQuery),\n  Mutation: _objectSpread({}, carsMutation)\n};\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers\n});\nconst handler = server.createHandler({\n  path: '/api/graphql',\n  onHealthCheck: () => {\n    console.log('server is running...');\n  }\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default handler;","map":null,"metadata":{},"sourceType":"module"}