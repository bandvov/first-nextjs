{"ast":null,"code":"import Cars from './cars.model';\n\nclass CarsServices {\n  async getAllCars({\n    skip,\n    limit\n  }) {\n    const cars = await Cars.find().skip(skip).limit(limit).sort({\n      year: -1\n    });\n    const count = await Cars.countDocuments();\n    return {\n      cars,\n      count\n    };\n  }\n\n  async getCarById({\n    id\n  }) {\n    const car = await Cars.findById(id);\n\n    if (!car) {\n      throw new Error('car not found');\n    }\n\n    return car;\n  }\n\n  async addCar({\n    car\n  }) {\n    return await new Cars(car).save();\n  }\n\n  updateCar({\n    id,\n    car\n  }) {\n    return Cars.findByIdAndUpdate(id, {\n      $set: car\n    }, {\n      new: true\n    });\n  }\n\n  deleteCar({\n    id\n  }) {\n    return Cars.findByIdAndDelete(id);\n  }\n\n  async getFilteredCars({\n    filter,\n    skip,\n    limit\n  }) {\n    const filters = this.configureFilter(filter);\n    const cars = await Cars.find(filters).skip(skip).limit(limit);\n    const count = await Cars.find(filters).countDocuments();\n    return {\n      cars,\n      count\n    };\n  }\n\n  configureFilter(data) {\n    const filter = {};\n    const {\n      brand = '',\n      model = '',\n      minYear = 1990,\n      maxYear = 2022,\n      minPrice = 0,\n      maxPrice = 222222,\n      color = '',\n      searchText = ''\n    } = data;\n\n    if (brand) {\n      filter.brand = new RegExp(brand, 'i');\n    }\n\n    if (model) {\n      filter.model = new RegExp(model, 'i');\n    }\n\n    if (minPrice) {\n      filter.price = {\n        $gte: +minPrice,\n        $lte: minPrice\n      };\n    }\n\n    if (maxPrice) {\n      filter.price = {\n        $gte: minPrice,\n        $lte: +maxPrice\n      };\n    }\n\n    if (minYear) {\n      filter.year = {\n        $gte: +minYear,\n        $lte: +maxYear\n      };\n    }\n\n    if (maxYear) {\n      filter.year = {\n        $gte: +minYear,\n        $lte: +maxYear\n      };\n    }\n\n    if (color) {\n      filter.colorSimpleName = new RegExp(color, 'i');\n    }\n\n    if (searchText) {\n      filter.description = new RegExp(searchText, 'i');\n    }\n\n    return filter;\n  }\n\n}\n\nexport default new CarsServices();","map":{"version":3,"sources":["C:/Users/Admin/Desktop/VS Code project/NEXTJS/first-nextjs/modules/cars.services.js"],"names":["Cars","CarsServices","getAllCars","skip","limit","cars","find","sort","year","count","countDocuments","getCarById","id","car","findById","Error","addCar","save","updateCar","findByIdAndUpdate","$set","new","deleteCar","findByIdAndDelete","getFilteredCars","filter","filters","configureFilter","data","brand","model","minYear","maxYear","minPrice","maxPrice","color","searchText","RegExp","price","$gte","$lte","colorSimpleName","description"],"mappings":"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","sourcesContent":["import Cars from './cars.model';\n\nclass CarsServices {\n  async getAllCars({ skip, limit }) {\n    const cars = await Cars.find().skip(skip).limit(limit).sort({ year: -1 });\n    const count = await Cars.countDocuments();\n    return { cars, count };\n  }\n\n  async getCarById({ id }) {\n    const car = await Cars.findById(id);\n    if (!car) {\n      throw new Error('car not found');\n    }\n    return car;\n  }\n\n  async addCar({ car }) {\n    return await new Cars(car).save();\n  }\n\n  updateCar({ id, car }) {\n    return Cars.findByIdAndUpdate(id, { $set: car }, { new: true });\n  }\n\n  deleteCar({ id }) {\n    return Cars.findByIdAndDelete(id);\n  }\n\n  async getFilteredCars({ filter, skip, limit }) {\n    const filters = this.configureFilter(filter);\n    const cars = await Cars.find(filters).skip(skip).limit(limit);\n    const count = await Cars.find(filters).countDocuments();\n\n    return { cars, count };\n  }\n\n  configureFilter(data) {\n    const filter = {};\n    const {\n      brand = '',\n      model = '',\n      minYear = 1990,\n      maxYear = 2022,\n      minPrice = 0,\n      maxPrice = 222222,\n      color = '',\n      searchText = '',\n    } = data;\n\n    if (brand) {\n      filter.brand = new RegExp(brand, 'i');\n    }\n\n    if (model) {\n      filter.model = new RegExp(model, 'i');\n    }\n\n    if (minPrice) {\n      filter.price = { $gte: +minPrice, $lte: minPrice };\n    }\n\n    if (maxPrice) {\n      filter.price = { $gte: minPrice, $lte: +maxPrice };\n    }\n\n    if (minYear) {\n      filter.year = { $gte: +minYear, $lte: +maxYear };\n    }\n\n    if (maxYear) {\n      filter.year = { $gte: +minYear, $lte: +maxYear };\n    }\n\n    if (color) {\n      filter.colorSimpleName = new RegExp(color, 'i');\n    }\n    if (searchText) {\n      filter.description = new RegExp(searchText, 'i');\n    }\n\n    return filter;\n  }\n}\n\nexport default new CarsServices();\n"]},"metadata":{},"sourceType":"module"}